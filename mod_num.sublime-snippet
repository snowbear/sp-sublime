<snippet>
	<content><![CDATA[
const int MOD = 1000 * 1000 * 1000 + 7;

struct mod_num {
	int x;
	
	mod_num() : x(0) { }
	mod_num(int x) : x(x >= MOD ? x % MOD : x) { }
	
	mod_num operator + (const mod_num &b) const { int res = x + b.x; if (res >= MOD) res -= MOD; return res; }
	mod_num operator +=(const mod_num &b) { x += b.x; if (x >= MOD) x -= MOD; return *this; }
	
	mod_num operator - (const mod_num &b) const { int res = x - b.x; if (res < 0) res += MOD; return res; }
	mod_num operator -=(const mod_num &b) { if (b.x > 0) *this += MOD - b.x; return *this; }
	
	mod_num operator * (const mod_num &b) const { return (int) (x * (LL) b.x % MOD); }
	mod_num operator *=(const mod_num &b) { x = x * (LL) b.x % MOD; return *this; }
		
	mod_num pow(int n) const {
		if (n == 0) return 1;
		auto res = pow(n / 2);
		res *= res;
		if (n & 1) res *= *this;
		return res;
	}
	
	mod_num rev() const {
		return pow(MOD - 2);
	}
};

mod_num operator +(int a, const mod_num &b) { return mod_num(a) + b; }
mod_num operator *(int a, const mod_num &b) { return mod_num(a) * b; }
istream& operator >> (istream& is, mod_num &x) { return is >> x.x; }
ostream& operator << (ostream& os, const mod_num &x) { return os << x.x; }
]]></content>
	<tabTrigger>MODNUM</tabTrigger>
	<scope>source.c++</scope>
</snippet>
